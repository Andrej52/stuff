import tkinter as tk
import math
import time

title = "Electrical Desktop Tool"
button1Text = "Ohm's law"
button2Text = "Power draw"
button3Text = "Table of ameperages"


prierezy=[0.007853981633974483, 0.031415926535897934, 0.07068583470577035, 0.12566370614359174, 0.19634954084936207,
        0.2827433388230814, 0.3848451000647496, 0.5026548245743669, 0.6361725123519332, 0.7853981633974483, 0.9503317777109126,
        1.1309733552923256, 1.3273228961416876, 1.5393804002589984, 1.7671458676442586, 2.0106192982974678, 2.269800692218625, 
        2.5446900494077327, 2.8352873698647882, 3.141592653589793, 3.463605900582747, 3.8013271108436504, 4.1547562843725006, 
        4.523893421169302, 4.908738521234052, 5.3092915845667505, 5.725552611167399, 6.157521601035993, 6.60519855417254, 
        7.0685834705770345, 7.547676350249479, 8.042477193189871, 8.55298599939821, 9.0792027688745, 9.62112750161874, 
        10.17876019763093, 10.752100856911069, 11.341149479459153, 11.945906065275187, 12.566370614359172, 13.202543126711104, 
        13.854423602330987, 14.522012041218817, 15.205308443374602, 15.904312808798327, 16.619025137490002, 17.349445429449634, 18.09557368467721, 
        18.857409903172737, 19.634954084936208, 20.42820622996763, 21.237166338267002, 22.061834409834322, 22.902210444669596, 23.75829444277281, 
        24.630086404143974, 25.517586328783096, 26.42079421669016, 27.339710067865177, 28.274333882308138, 29.224665660019046, 30.190705400997917, 
        31.17245310524472, 32.169908772759484, 33.18307240354219, 34.21194399759284, 35.25652355491145, 36.316811075498, 37.392806559352515, 38.48451000647496, 
        39.59192141686537, 40.71504079052372, 41.85386812745002, 43.008403427644275, 44.178646691106465, 45.36459791783661, 46.566257107834716, 47.78362426110075, 
        49.01669937763475, 50.26548245743669, 51.52997350050658, 52.81017250684442, 54.106079476450226, 55.41769440932395, 56.74501730546564, 58.08804816487527, 
        59.44678698755285, 60.821233773498406, 62.211388522711886, 63.61725123519331, 65.03882191094269, 66.47610054996001, 67.9290871522453, 69.39778171779854, 
        70.8821842466197, 72.38229473870884, 73.8981131940659, 75.42963961269095, 76.97687399458391, 78.53981633974483]
zatazenia=[0.05105088062083414, 0.20420352248333656, 0.45945792558750725,
             0.8168140899333463, 1.2762720155208536, 1.837831702350029, 
             2.501493150420872, 3.267256359733385, 4.135121330287566,
              5.105088062083414, 6.1771565551209315, 7.351326809400116, 
              8.62759882492097, 10.005972601683489, 11.486448139687681, 
              13.06902543893354, 14.753704499421064, 16.540485321150264, 
              18.429367904121122, 20.420352248333657, 22.513438353787855, 
              24.708626220483726, 27.005915848421253, 29.405307237600464,
               31.906800388021338, 34.51039529968388, 37.216091972588096, 
               40.023890406733955, 42.93379060212151, 45.945792558750725, 
               49.059896276621615, 52.27610175573416, 55.59440899608836, 
               59.014817997684254, 62.53732876052182, 66.16194128460106,
                69.88865556992195, 73.71747161648449, 77.64838942428871,
                81.68140899333463, 85.81653032362217, 90.05375341515142, 
                94.3930782679223, 98.8345048819349, 103.37803325718913,
                108.02366339368501, 112.77139529142262, 117.62122895040186,
                122.57316437062279, 127.62720155208535, 132.78334049478957, 
                138.0415811987355, 143.4019236639231, 148.86436789035238, 154.42891387802328,
                160.09556162693582, 165.8643111370901, 171.73516240848605, 177.70811544112365, 
                183.7831702350029, 189.9603267901238, 196.23958510648646, 202.6209451840907, 209.10440702293664, 
                215.68997062302424, 222.37763598435345, 229.16740310692444, 236.05927199073702, 243.05324263579135,
                250.14931504208727, 257.3474892096249, 264.6477651384042, 272.0501428284251, 279.5546222796878, 287.16120349219204,
                294.86988646593795, 302.68067120092564, 310.59355769715484, 318.60854595462587, 326.7256359733385, 334.94482775329277, 
                343.2661212944887, 351.68951659692647, 360.2150136606057, 368.8426124855266, 377.5723130716892, 386.4041154190935, 395.3380195277396,
                404.37402539762724, 413.5121330287565, 422.7523424211275, 432.09465357474005, 441.53906648959446, 451.0855811656905, 460.73419760302806, 
                470.4849158016074, 480.33773576142835, 490.29265748249117, 500.3496809647954, 510.5088062083414]
wire_cross =[0.5,0.75,1,1.5,2.5,4,6,10,16,25,35,50]


def check_input(input):
    if  input == "" or input == "0" or input == 0:
        return 0.0
    return float(input)

def count_zeroes(array):
    count = 0
    for elem in array:
        if elem == 0:
            count+=1

    return count
    

def ohm_law():
    u = input("Napatie: ")
    i = input("Prúd: ")
    r = input("Odpor: ")

    u = float(check_input(u))
    i = float(check_input(i))
    r = float(check_input(r))


    if count_zeroes([u,r,i]) > 1:
       return 0
      
    if u == 0:
      result = i*r
    elif i == 0 :
      result = u/r
    else:
        result = u/i
    return round(result,3)

def resistance(type):
    rArr=[]
    R = 0
    if type == "s":
        rNum=int(input("Zvolte počet odporov:"))
        for o in range(rNum):
                r=int(input(f"""zvolte R: {o}: """))
                rArr.append(r)
                R += rArr[o]

    if type == "p":
        rNum=int(input("Zvolte počet odporov v Paralel:"))
        for o in range(rNum):
            r=int(input(f"""zvolte R{o}: """))
            rArr.append(r)
        for x in range(len(rArr)):
            R += (1/rArr[x])
        R = round(1/R,3)
    return R

def power_current():
    u=input("Napatie: ")
    p=input("Výkon: ")
    i=input("Prúd: ")

    u = check_input(u)
    p = check_input(p)
    i = check_input(i)


    zer_count = count_zeroes([u,p,i])

    if zer_count > 1  or zer_count == 0:
       return 0

    if u == 0:
        result = p / i
    if i == 0:
        result = p / u
    if p == 0:
        result = i * u

    return result + 0.1 

def get_cross_section(d = 0 ):
    return   math.pi * math.pow((d/2),2)


def get_range_Arr(array , compared):
    retArr = []
    for key in range(len(array)):
        # spodna a horna hranica "rozsah"  uzatvoreny
        if (array[key-1] <= compared) and (array[key] >= compared) :
            retArr.append( round(array[key],4))

    if len(retArr) == 1:
      return retArr[0]
    
    return retArr


def get_wires(current = 0.0, cross_sec = 0.0, rho = 6.0, t_Coefiecient = 0.10):
    arr =[]
    if cross_sec != 0  and current != 0:
        return 
    tolerance = 1

    min_prierez = (current * (tolerance + t_Coefiecient)) / rho
    zatazenie   = (cross_sec * (tolerance - t_Coefiecient)) * rho

    min_prierez = round(min_prierez,3)
    zatazenie   = round(zatazenie,3)

    if current != 0 and cross_sec == 0 :
        arr = get_range_Arr(prierezy,min_prierez)
        print(f"Tolerancia: + {t_Coefiecient} %")
        print(f" odber :{current} A")
        print(f" min_ prierez:{min_prierez} mm2 v \n Ro:{rho} pri {current} A")
        print(f" vhodny prierez:{ arr} mm2 \n  s Ro:{rho} pri {current} A")
        differences = list(map(lambda x:  abs(x - arr),wire_cross)) 

        index = differences.index(min(differences))
        return wire_cross[index]

    if cross_sec != 0  and current == 0 :   
        arr = get_range_Arr(zatazenia,zatazenie)
        print(f"Tolerancia:- {t_Coefiecient} %")
        print(f" prierez_vodica:{cross_sec} mm2")
        print(f" zatazenie:{cross_sec * rho} A v Ro:{rho}")
        print(f" vhodne zatazenie: {arr} A  \n  s Ro:{rho} pri {cross_sec} mm2")

    return arr


def main():
   print(power_current())
main()